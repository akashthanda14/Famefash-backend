openapi: 3.0.3
info:
  title: Example E-commerce API
  version: 1.1.0
  description: |
    REST API for user authentication, cart management, orders, and products.
    
    ## Authentication
    This API supports two authentication methods:
    - **JWT Bearer Token**: For API access with traditional login
    - **Google OAuth 2.0**: For social login integration
    
    ## Base URLs
    - Production: https://dolchico.up.railway.app/api
    - Development: http://localhost:4000/api

servers:
  - url: https://dolchico.up.railway.app/api
    description: Production server
  - url: http://localhost:4000/api
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoints
    
    sessionAuth:
      type: apiKey
      in: cookie
      name: connect.sid
      description: Session-based authentication for OAuth flows
    
    googleOAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            openid: OpenID Connect scope
            profile: Access to your profile info
            email: Access to your email address

  schemas:
    # Request Schemas
    RegisterRequest:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          minLength: 6
          example: "securePassword123"

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          example: "securePassword123"

    AddToCartRequest:
      type: object
      required: [itemId, size]
      properties:
        itemId:
          type: integer
          example: 1
        size:
          type: string
          example: "M"

    UpdateCartRequest:
      type: object
      required: [itemId, size, quantity]
      properties:
        itemId:
          type: integer
          example: 1
        size:
          type: string
          example: "M"
        quantity:
          type: integer
          minimum: 0
          example: 2

    Address:
      type: object
      required: [street, city, country]
      properties:
        street:
          type: string
          example: "123 Main Street"
        city:
          type: string
          example: "New York"
        country:
          type: string
          example: "USA"
        zipCode:
          type: string
          example: "10001"
        state:
          type: string
          example: "NY"

    PlaceOrderItem:
      type: object
      required: [productId, quantity, size]
      properties:
        productId:
          type: integer
          example: 1
        quantity:
          type: integer
          minimum: 1
          example: 2
        size:
          type: string
          example: "M"

    PlaceOrderRequest:
      type: object
      required: [items, amount, address]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PlaceOrderItem'
        amount:
          type: number
          format: float
          example: 99.99
        address:
          $ref: '#/components/schemas/Address'
        paymentMethod:
          type: string
          enum: [stripe, razorpay, cod]
          example: "stripe"

    UpdateOrderStatusRequest:
      type: object
      required: [orderId, status]
      properties:
        orderId:
          type: integer
          example: 1
        status:
          type: string
          enum: [ORDER_PLACED, CONFIRMED, SHIPPED, DELIVERED, CANCELLED]
          example: "SHIPPED"

    # Response Schemas
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@example.com"
        role:
          type: string
          enum: [USER, ADMIN, MODERATOR]
          example: "USER"
        createdAt:
          type: string
          format: date-time

    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Cotton T-Shirt"
        description:
          type: string
          example: "Comfortable cotton t-shirt"
        price:
          type: number
          format: float
          example: 29.99
        image:
          type: array
          items:
            type: string
        category:
          type: string
          example: "Clothing"
        subCategory:
          type: string
          example: "T-Shirts"
        sizes:
          type: array
          items:
            type: string
          example: ["S", "M", "L", "XL"]
        bestseller:
          type: boolean
          example: false
        stock:
          type: integer
          example: 100

    Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        amount:
          type: number
          format: float
          example: 99.99
        address:
          $ref: '#/components/schemas/Address'
        status:
          type: string
          example: "ORDER_PLACED"
        paymentMethod:
          type: string
          example: "stripe"
        payment:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time

    OrderItem:
      type: object
      properties:
        id:
          type: integer
        productId:
          type: integer
        quantity:
          type: integer
        size:
          type: string
        price:
          type: number
          format: float

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Login successful"
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Invalid credentials"
        error:
          type: string
          example: "INVALID_CREDENTIALS"

paths:
  # Authentication Endpoints
  /user/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/login:
    post:
      tags: [Authentication]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful, returns token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/login:
    post:
      tags: [Admin]
      summary: Admin login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful, returns token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # OAuth Endpoints
  /auth/google:
    get:
      tags: [OAuth]
      summary: Initiate Google OAuth 2.0 login
      description: Redirects user to Google OAuth consent screen
      responses:
        '302':
          description: Redirect to Google OAuth consent screen

  /auth/google/callback:
    get:
      tags: [OAuth]
      summary: Google OAuth 2.0 callback endpoint
      description: Handles the callback from Google after user authentication
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: Authorization code from Google
        - name: state
          in: query
          schema:
            type: string
          description: State parameter for CSRF protection
      responses:
        '302':
          description: Redirect after successful or failed login

  /auth/logout:
    get:
      tags: [OAuth]
      summary: Logout the current user
      description: Destroys the user session and redirects to home page
      security:
        - sessionAuth: []
      responses:
        '302':
          description: Redirect after logout

  /auth/profile:
    get:
      tags: [OAuth]
      summary: Get current logged-in user profile
      security:
        - sessionAuth: []
        - bearerAuth: []
      responses:
        '200':
          description: User profile information
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Cart Endpoints
  /cart/get:
    get:
      tags: [Cart]
      summary: Get user cart
      security:
        - bearerAuth: []
        - sessionAuth: []
      responses:
        '200':
          description: User's cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  cartData:
                    type: object

  /cart/add:
    post:
      tags: [Cart]
      summary: Add item to cart
      security:
        - bearerAuth: []
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToCartRequest'
      responses:
        '200':
          description: Item added to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /cart/update:
    post:
      tags: [Cart]
      summary: Update cart item quantity
      security:
        - bearerAuth: []
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartRequest'
      responses:
        '200':
          description: Cart updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  # Order Endpoints
  /order/place:
    post:
      tags: [Orders]
      summary: Place a new order
      security:
        - bearerAuth: []
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceOrderRequest'
      responses:
        '201':
          description: Order placed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  order:
                    $ref: '#/components/schemas/Order'

  /order/userorders:
    post:
      tags: [Orders]
      summary: Get orders for logged-in user
      security:
        - bearerAuth: []
        - sessionAuth: []
      responses:
        '200':
          description: User's orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'

  /order/list:
    post:
      tags: [Admin]
      summary: Admin - Get all orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: All orders (admin)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'

  /order/status:
    post:
      tags: [Admin]
      summary: Admin - Update order status
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderStatusRequest'
      responses:
        '200':
          description: Order status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  # Product Endpoints
  /product/add:
    post:
      tags: [Products]
      summary: Add a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - description
                - price
                - category
                - subCategory
                - sizes
              properties:
                name:
                  type: string
                  example: "Cotton T-Shirt"
                description:
                  type: string
                  example: "Comfortable cotton t-shirt"
                price:
                  type: number
                  example: 29.99
                category:
                  type: string
                  example: "Clothing"
                subCategory:
                  type: string
                  example: "T-Shirts"
                bestseller:
                  type: boolean
                  example: false
                sizes:
                  type: string
                  example: '["S", "M", "L"]'
                image1:
                  type: string
                  format: binary
                image2:
                  type: string
                  format: binary
                image3:
                  type: string
                  format: binary
                image4:
                  type: string
                  format: binary
      responses:
        '201':
          description: Product added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  product:
                    $ref: '#/components/schemas/Product'

  /product/list:
    get:
      tags: [Products]
      summary: List all products
      parameters:
        - name: category
          in: query
          schema:
            type: string
          description: Filter by category
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Number of products to return
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
          description: Number of products to skip
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  total:
                    type: integer

  /product/remove:
    post:
      tags: [Products]
      summary: Remove a product by ID
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Product removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

tags:
  - name: Authentication
    description: User registration and login
  - name: OAuth
    description: Google OAuth 2.0 authentication
  - name: Cart
    description: Shopping cart management
  - name: Orders
    description: Order management
  - name: Products
    description: Product management
  - name: Admin
    description: Administrative functions

security:
  - bearerAuth: []
  - sessionAuth: []
